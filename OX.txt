public static void main(String[] args) {
         ox = new OX();
         while (true) {
             printTable();
             input();
             while(!ox.put(col, row)){
                 System.out.print(ox.getTableString());
                 input();
             }
             ox.put(col, row);
             ox.switchPlayer();
             if(ox.checkWin(col,row)){
                 break;
             }
         }
    }


@Test
    public  void checkWin1(){
        OX ox = new OX();
        ox.put(0,0);
        ox.put(0,1);
        ox.put(0,2);
        assertEquals(" 012\n0X--\n1X--\n2X--\n",ox.getTableString());
        assertEquals(true, ox.checkWin(0,0));
        assertEquals(true, ox.checkWin(0,1));
        assertEquals(true, ox.checkWin(0,2));
    }
    @Test
    public  void checkWin2(){
        OX ox = new OX();
        ox.put(0,0);
        ox.put(0,1);

        assertEquals(" 012\n0X--\n1X--\n2---\n",ox.getTableString());
        assertEquals(false, ox.checkWin(0,0));
        assertEquals(false, ox.checkWin(0,1));

    }
    @Test
    public  void checkWin3(){
        OX ox = new OX();
        ox.put(1,0);
        ox.put(1,1);
        ox.put(1,2);
        assertEquals(" 012\n0-X-\n1-X-\n2-X-\n",ox.getTableString());
        assertEquals(true, ox.checkWin(1,0));
        assertEquals(true, ox.checkWin(1,1));
        assertEquals(true, ox.checkWin(1,2));
    }
    @Test
    public  void checkWin4(){
        OX ox = new OX();
        ox.put(0,0);
        ox.put(1,0);
        ox.put(2,0);
        assertEquals(" 012\n0XXX\n1---\n2---\n",ox.getTableString());
        assertEquals(true, ox.checkWin(0,0));
        assertEquals(true, ox.checkWin(1,0));
        assertEquals(true, ox.checkWin(2,0));
    }
    @Test
    public  void checkWin5(){
        OX ox = new OX();
        ox.put(0,1);
        ox.put(1,1);
        ox.put(2,1);
        assertEquals(" 012\n0---\n1XXX\n2---\n",ox.getTableString());
        assertEquals(true, ox.checkWin(0,1));
        assertEquals(true, ox.checkWin(1,1));
        assertEquals(true, ox.checkWin(2,1));
    }
    @Test
    public  void checkWin6(){
        OX ox = new OX();
        ox.put(0,2);
        ox.put(1,2);
        ox.put(2,2);
        assertEquals(" 012\n0---\n1---\n2XXX\n",ox.getTableString());
        assertEquals(true, ox.checkWin(0,2));
        assertEquals(true, ox.checkWin(1,2));
        assertEquals(true, ox.checkWin(2,2));
    }
    @Test
    public  void checkWin7(){
        OX ox = new OX();
        ox.put(0,0);
        ox.put(1,1);
        ox.put(2,2);
        assertEquals(" 012\n0X--\n1-X-\n2--X\n",ox.getTableString());
        assertEquals(true, ox.checkWin(0,0));
        assertEquals(true, ox.checkWin(1,1));
        assertEquals(true, ox.checkWin(2,2));
    }
    @Test
    public  void checkWin8(){
        OX ox = new OX();
        ox.put(2,0);
        ox.put(1,1);
        ox.put(0,2);
        assertEquals(" 012\n0--X\n1-X-\n2X--\n",ox.getTableString());
        assertEquals(true, ox.checkWin(2,0));
        assertEquals(true, ox.checkWin(1,1));
        assertEquals(true, ox.checkWin(0,2));
    }
    @Test
    public  void checkWin9(){
        OX ox = new OX();
        ox.put(2,0);
        ox.put(2,1);
        ox.put(2,2);
        assertEquals(" 012\n0--X\n1--X\n2--X\n",ox.getTableString());
        assertEquals(true, ox.checkWin(2,0));
        assertEquals(true, ox.checkWin(2,1));
        assertEquals(true, ox.checkWin(2,2));
    }


if (table[0+1][0+1] == table[1+1][0+1] && table[1+1][0+1] == table[2+1][0+1] && (table[0+1][0+1] == "X" || table[0+1][0+1] == "O")) {
            return true;
        } else if (table[0+1][1+1] == table[1+1][1+1] && table[1+1][1+1] == table[2+1][1+1] && (table[0+1][1+1] == "X" || table[0+1][1+1] == "O")) {
            return true;
        } else if (table[0+1][2+1] == table[1+1][2+1] && table[1+1][2+1] == table[2+1][2+1] && (table[0+1][2+1] == "X" || table[0+1][2+1] == "O")) {
            return true;
        } else if (table[0+1][0+1] == table[0+1][1+1] && table[0+1][1+1] == table[0+1][2+1] && (table[0+1][0+1] == "X" || table[0+1][0+1] == "O")) {
            return true;
        } else if (table[1+1][0+1] == table[1+1][1+1] && table[1+1][1+1] == table[1+1][2+1] && (table[1+1][0+1] == "X" || table[1+1][0+1] == "O")) {
            return true;
        } else if (table[2+1][0+1] == table[2+1][1+1] && table[2+1][1+1] == table[2+1][2+1] && (table[2+1][0+1] == "X" || table[2+1][0+1] == "O")) {
            return true;
        } else if (table[0+1][0+1] == table[1+1][1+1] && table[1+1][1+1] == table[2+1][2+1] && (table[0+1][0+1] == "X" || table[0+1][0+1] == "O")) {
            return true;
        } else if (table[2+1][0+1] == table[1+1][1+1] && table[1+1][1+1] == table[0+1][2+1] && (table[2+1][0+1] == "X" || table[2+1][0+1] == "O")) {
            return true;
        } else {


            return false;
        }